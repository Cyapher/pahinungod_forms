# Generated by Django 4.2.10 on 2024-05-08 03:46

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('username', models.CharField(blank=True, error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, null=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('password', models.CharField(blank=True, max_length=128, null=True, verbose_name='password')),
                ('date_joined', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Program',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=10)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(max_length=255)),
                ('program_img', models.ImageField(blank=True, upload_to='volunteer_forms/static/')),
            ],
        ),
        migrations.CreateModel(
            name='Volunteer',
            fields=[
                ('authuser_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='volunteer_forms.authuser')),
                ('middle_name', models.CharField(max_length=50, null=True)),
                ('address', models.CharField(max_length=100, null=True)),
                ('mobile', models.CharField(max_length=13, null=True)),
                ('telephone', models.CharField(max_length=10, null=True)),
                ('birthdate', models.DateField(max_length=50, null=True)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('civilStatus', models.CharField(choices=[('Single', 'Single'), ('Married', 'Married')], max_length=50, null=True)),
                ('sex', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('Other/Will not disclose', 'Other/Will not disclose')], max_length=50, null=True)),
                ('bloodType', models.CharField(max_length=3, null=True)),
                ('religion', models.CharField(max_length=100, null=True)),
                ('healthConditions', models.TextField(blank=True, null=True)),
                ('skillsHobbies', models.TextField(blank=True, null=True)),
                ('foodRestrictions', models.TextField(blank=True, null=True)),
                ('constituentUnit', models.CharField(blank=True, max_length=50, null=True)),
                ('specification', models.CharField(blank=True, max_length=50, null=True)),
                ('occupation', models.CharField(blank=True, choices=[('Physician', 'Physician'), ('Nurse', 'Nurse'), ('Pharmacist', 'Pharmacist'), ('Dentist', 'Dentist'), ('ENT', 'ENT'), ('Teacher', 'Teacher'), ('Other', 'Other')], max_length=50, null=True)),
                ('otherOccu', models.CharField(blank=True, max_length=50, null=True)),
                ('beneficiaries', models.CharField(max_length=50, null=True)),
                ('relation', models.CharField(max_length=50, null=True)),
                ('contactNum', models.CharField(max_length=50, null=True)),
                ('contactEmail', models.CharField(blank=True, max_length=50, null=True)),
                ('prcLicense', models.CharField(blank=True, max_length=7, null=True)),
                ('dept', models.CharField(blank=True, max_length=50, null=True)),
                ('company', models.CharField(blank=True, max_length=50, null=True)),
                ('officeAdd', models.CharField(blank=True, max_length=100, null=True)),
                ('license_telephone', models.CharField(blank=True, max_length=10, null=True)),
                ('license_email', models.CharField(blank=True, max_length=50, null=True)),
                ('workSched', models.CharField(blank=True, max_length=255, null=True)),
                ('idNum', models.CharField(blank=True, max_length=50, null=True)),
                ('course', models.CharField(blank=True, max_length=50, null=True)),
                ('college', models.CharField(blank=True, max_length=50, null=True)),
                ('yearLvl', models.CharField(blank=True, choices=[('1', '1st Year'), ('2', '2nd Year'), ('3', '3rd Year'), ('4', '4th Year'), ('5', '5th Year')], max_length=1, null=True)),
                ('startDate', models.CharField(choices=[('immediately', 'Immediately'), ('next_week', 'Next Week'), ('next_month', 'Next Month'), ('Other', 'Other')], max_length=50, null=True)),
                ('customStartDate', models.DateField(blank=True, max_length=50, null=True)),
                ('alumnusCheck', models.BooleanField(default=False)),
                ('pghCheck', models.BooleanField(default=False)),
                ('workCheck', models.BooleanField(default=False)),
                ('licenseCheck', models.BooleanField(default=False)),
                ('studentCheck', models.BooleanField(default=False)),
                ('programs', models.ManyToManyField(blank=True, to='volunteer_forms.program')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=('volunteer_forms.authuser',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
